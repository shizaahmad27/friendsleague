import { Injectable, ConflictException, NotFoundException } from '@nestjs/common';
import { PrismaService } from '../common/prisma.service';
import { CreateUserDto, UpdateUserDto } from './dto';
import { User } from '@prisma/client';
import * as bcrypt from 'bcryptjs';
import * as crypto from 'crypto';

// fjern passord feltet fra user typen
type UserWithoutPassword = Omit<User, 'password'>;

@Injectable()
export class UsersService {
  constructor(private prisma: PrismaService) {}

  async create(createUserDto: CreateUserDto): Promise<UserWithoutPassword> {
    const { username, email, phoneNumber, password } = createUserDto;
    
    // Convert empty strings to null for optional fields
    const normalizedEmail = email && email.trim() !== '' ? email.trim() : null;
    const normalizedPhoneNumber = phoneNumber && phoneNumber.trim() !== '' ? phoneNumber.trim() : null;

    // Check if user already exists
    const existingUser = await this.prisma.user.findFirst({
      where: {
        OR: [
          { username },
          ...(normalizedEmail ? [{ email: normalizedEmail }] : []),
          ...(normalizedPhoneNumber ? [{ phoneNumber: normalizedPhoneNumber }] : []),
        ],
      },
    });

    if (existingUser) {
      if (existingUser.username === username) {
        throw new ConflictException('Username already exists');
      }
      if (normalizedEmail && existingUser.email === normalizedEmail) {
        throw new ConflictException('Email already exists');
      }
      if (normalizedPhoneNumber && existingUser.phoneNumber === normalizedPhoneNumber) {
        throw new ConflictException('Phone number already exists');
      }
    }

    // Hash password
    const hashedPassword = await bcrypt.hash(password, 12);

    // Create user (id is cuid generated by DB, inviteCode set after we know id)
    const user = await this.prisma.user.create({
      data: {
        username,
        email: normalizedEmail,
        phoneNumber: normalizedPhoneNumber,
        password: hashedPassword,
      },
    });

    // Now compute inviteCode using the actual user.id and store it
    const finalInviteCode = this.generateInviteCode(user.id);
    try {
      // Use loose typing until Prisma types are regenerated after migration
      await (this.prisma as any).user.update({
        where: { id: user.id },
        data: { inviteCode: finalInviteCode },
      });
    } catch (_) {
      // ignore if migration not applied yet
    }

    // Return user without password (... for Ã¥ sre feltene ut, inneholder automatisk alle felt)
    const { password: _, ...userWithoutPassword } = user;
    return userWithoutPassword;
  }

  async findByUsername(username: string): Promise<User | null> {
    return this.prisma.user.findUnique({
      where: { username },
    });
  }

  async findByEmail(email: string): Promise<User | null> {
    return this.prisma.user.findUnique({
      where: { email },
    });
  }

  async findById(id: string): Promise<UserWithoutPassword | null> {
    const user = await this.prisma.user.findUnique({
      where: { id },
    });
    
    if (!user) return null;
    
    // Return user without password
    const { password: _, ...userWithoutPassword } = user;
    return userWithoutPassword;
  }

  async update(id: string, updateUserDto: UpdateUserDto): Promise<UserWithoutPassword> {
    const user = await this.prisma.user.findUnique({
      where: { id },
    });

    if (!user) {
      throw new NotFoundException('User not found');
    }

    const updatedUser = await this.prisma.user.update({
      where: { id },
      data: updateUserDto,
    });

    // Return user without password
    const { password: _, ...userWithoutPassword } = updatedUser;
    return userWithoutPassword;
  }

  async updateOnlineStatus(id: string, isOnline: boolean): Promise<{ success: boolean; message: string }> {
    await this.prisma.user.update({
      where: { id },
      data: {
        isOnline,
        lastSeen: new Date(),
      },
    });
    
    return {
      success: true,
      message: `User status updated to ${isOnline ? 'online' : 'offline'}`,
    };
  }

  async validatePassword(password: string, hashedPassword: string): Promise<boolean> {
    return bcrypt.compare(password, hashedPassword);
  }

  async searchUsers(username: string): Promise<UserWithoutPassword[]> {
    const users = await this.prisma.user.findMany({
      where: {
        username: {
          contains: username,
          mode: 'insensitive',
        },
      },
      select: {
        id: true,
        username: true,
        email: true,
        phoneNumber: true,
        inviteCode: true,
        avatar: true,
        isOnline: true,
        lastSeen: true,
        showOnlineStatus: true,
        createdAt: true,
        updatedAt: true,
        // Exclude password field
      },
      take: 10, // Limit to 10 results
      orderBy: {
        username: 'asc',
      },
    });

    return users;
  }

  async getUserFriends(userId: string): Promise<UserWithoutPassword[]> {
    const friendships = await this.prisma.friendship.findMany({
      where: {
        userId,
        status: 'ACCEPTED',
      },
      include: {
        friend: {
          select: {
            id: true,
            username: true,
            email: true,
            phoneNumber: true,
            inviteCode: true,
            avatar: true,
            isOnline: true,
            lastSeen: true,
            showOnlineStatus: true,
            createdAt: true,
            updatedAt: true,
            // Exclude password field
          },
        },
      },
      orderBy: {
        updatedAt: 'desc',
      },
    });

    return friendships.map(friendship => friendship.friend);
  }
  private generateInviteCode(userId: string): string {
    const secret = process.env.INVITE_CODE_SECRET || process.env.JWT_SECRET || 'fallback-secret-change-me';
    const hmac = crypto.createHmac('sha256', secret).update(userId).digest('hex');
    return hmac.substring(0, 8).toUpperCase();
  }

  // Privacy Settings Methods
  async getPrivacySettings(userId: string): Promise<{
    global: { showOnlineStatus: boolean };
    friends: Array<{ friendId: string; hideOnlineStatus: boolean }>;
  }> {
    const user = await this.prisma.user.findUnique({
      where: { id: userId },
      select: { showOnlineStatus: true },
    });

    if (!user) {
      throw new NotFoundException('User not found');
    }

    const friendSettings = await this.prisma.userPrivacySettings.findMany({
      where: { userId },
      select: { targetUserId: true, hideOnlineStatus: true },
    });

    return {
      global: { showOnlineStatus: user.showOnlineStatus },
      friends: friendSettings.map(setting => ({
        friendId: setting.targetUserId,
        hideOnlineStatus: setting.hideOnlineStatus,
      })),
    };
  }

  async updateGlobalOnlineStatus(userId: string, showOnlineStatus: boolean): Promise<{ success: boolean; message: string }> {
    await this.prisma.user.update({
      where: { id: userId },
      data: { showOnlineStatus },
    });

    return {
      success: true,
      message: `Global online status visibility updated to ${showOnlineStatus ? 'visible' : 'hidden'}`,
    };
  }

  async updateFriendOnlineStatusVisibility(
    userId: string, 
    targetUserId: string, 
    hideOnlineStatus: boolean
  ): Promise<{ success: boolean; message: string }> {
    await this.prisma.userPrivacySettings.upsert({
      where: {
        userId_targetUserId: {
          userId,
          targetUserId,
        },
      },
      update: { hideOnlineStatus },
      create: {
        userId,
        targetUserId,
        hideOnlineStatus,
      },
    });

    return {
      success: true,
      message: `Online status visibility for friend updated to ${hideOnlineStatus ? 'hidden' : 'visible'}`,
    };
  }

  async getFriendOnlineStatusVisibility(userId: string, targetUserId: string): Promise<boolean> {
    const setting = await this.prisma.userPrivacySettings.findUnique({
      where: {
        userId_targetUserId: {
          userId,
          targetUserId,
        },
      },
    });

    return setting?.hideOnlineStatus || false;
  }

  async canUserSeeOnlineStatus(viewerId: string, targetUserId: string): Promise<boolean> {
    // Check if target user has global online status enabled
    const targetUser = await this.prisma.user.findUnique({
      where: { id: targetUserId },
      select: { showOnlineStatus: true },
    });

    if (!targetUser || !targetUser.showOnlineStatus) {
      return false;
    }

    // Check if target user has hidden their status from the viewer
    const privacySetting = await this.prisma.userPrivacySettings.findUnique({
      where: {
        userId_targetUserId: {
          userId: targetUserId,
          targetUserId: viewerId,
        },
      },
    });

    return !privacySetting?.hideOnlineStatus;
  }
}
