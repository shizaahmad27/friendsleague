// https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  username    String   @unique
  email       String?  @unique
  phoneNumber String?  @unique
  password    String
  avatar      String?
  inviteCode  String?  @unique
  isOnline    Boolean  @default(false)
  lastSeen    DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  sentMessages        Message[]          @relation("MessageSender")
  chatParticipants    ChatParticipant[]
  leagueMembers       LeagueMember[]
  leagueAdmins        League[]           @relation("LeagueAdmin")
  eventParticipants   EventParticipant[]
  friendships         Friendship[]       @relation("UserFriendships")
  friendOf            Friendship[]       @relation("FriendOf")
  sentInvitations     Invitation[]       @relation("Inviter")
  receivedInvitations Invitation[]       @relation("Invitee")

  @@map("users")
}

model Invitation {
  id        String           @id @default(cuid())
  code      String           @unique
  inviterId String
  inviter   User             @relation("Inviter", fields: [inviterId], references: [id])
  inviteeId String?
  invitee   User?            @relation("Invitee", fields: [inviteeId], references: [id])
  status    FriendshipStatus @default(PENDING)
  expiredAt DateTime
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@map("invitations")
}

model Chat {
  id        String   @id @default(cuid())
  name      String?
  type      ChatType @default(DIRECT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  participants ChatParticipant[]
  messages     Message[]

  @@map("chats")
}

model ChatParticipant {
  id         String   @id @default(cuid())
  chatId     String
  userId     String
  joinedAt   DateTime @default(now())
  lastReadAt DateTime @default(now())

  // Relations
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatId, userId])
  @@map("chat_participants")
}

model Message {
  id        String      @id @default(cuid())
  content   String
  type      MessageType @default(TEXT)
  senderId  String
  chatId    String
  mediaUrl  String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  sender User @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model League {
  id          String   @id @default(cuid())
  name        String
  description String?
  adminId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  admin   User           @relation("LeagueAdmin", fields: [adminId], references: [id], onDelete: Cascade)
  members LeagueMember[]
  rules   LeagueRule[]
  events  Event[]

  @@map("leagues")
}

model LeagueMember {
  id       String   @id @default(cuid())
  userId   String
  leagueId String
  points   Int      @default(0)
  rank     Int      @default(0)
  joinedAt DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  league League @relation(fields: [leagueId], references: [id], onDelete: Cascade)

  @@unique([userId, leagueId])
  @@map("league_members")
}

model LeagueRule {
  id          String   @id @default(cuid())
  leagueId    String
  title       String
  description String
  points      Int
  createdAt   DateTime @default(now())

  // Relations
  league League @relation(fields: [leagueId], references: [id], onDelete: Cascade)

  @@map("league_rules")
}

model Event {
  id              String   @id @default(cuid())
  title           String
  description     String?
  leagueId        String?
  startDate       DateTime
  endDate         DateTime
  maxParticipants Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  league       League?            @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  participants EventParticipant[]
  rules        EventRule[]

  @@map("events")
}

model EventParticipant {
  id       String   @id @default(cuid())
  eventId  String
  userId   String
  points   Int      @default(0)
  joinedAt DateTime @default(now())

  // Relations
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@map("event_participants")
}

model EventRule {
  id          String   @id @default(cuid())
  eventId     String
  title       String
  description String
  points      Int
  createdAt   DateTime @default(now())

  // Relations
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_rules")
}

model Friendship {
  id        String           @id @default(cuid())
  userId    String
  friendId  String
  status    FriendshipStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  user   User @relation("UserFriendships", fields: [userId], references: [id], onDelete: Cascade)
  friend User @relation("FriendOf", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
  @@map("friendships")
}

// Enums
enum ChatType {
  DIRECT
  GROUP
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  FILE
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  BLOCKED
}
