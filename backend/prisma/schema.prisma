generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  username            String               @unique
  email               String?              @unique
  phoneNumber         String?              @unique
  password            String
  avatar              String?
  inviteCode          String?              @unique
  isOnline            Boolean              @default(false)
  lastSeen            DateTime             @default(now())
  showOnlineStatus    Boolean              @default(true)  // Global setting for online status visibility
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  chatParticipants    ChatParticipant[]
  eventParticipants   EventParticipant[]
  eventAdmins         Event[]              @relation("EventAdmin")
  friendOf            Friendship[]         @relation("FriendOf")
  friendships         Friendship[]         @relation("UserFriendships")
  receivedInvitations Invitation[]         @relation("Invitee")
  sentInvitations     Invitation[]         @relation("Inviter")
  leagueAdminRoles    LeagueAdmin[]
  leagueMembers       LeagueMember[]
  leagueAdmins        League[]             @relation("LeagueAdmin")
  messageReactions    MessageReaction[]
  messageReadReceipts MessageReadReceipt[]
  sentMessages        Message[]            @relation("MessageSender")
  privacySettings     UserPrivacySettings[] @relation("UserPrivacyOwner")
  privacySettingsTarget UserPrivacySettings[] @relation("UserPrivacyTarget")

  @@map("users")
}

model Invitation {
  id        String           @id @default(cuid())
  code      String           @unique
  inviterId String
  inviteeId String?
  status    FriendshipStatus @default(PENDING)
  expiredAt DateTime
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  invitee   User?            @relation("Invitee", fields: [inviteeId], references: [id])
  inviter   User             @relation("Inviter", fields: [inviterId], references: [id])

  @@map("invitations")
}

model Chat {
  id           String            @id @default(cuid())
  name         String?
  type         ChatType          @default(DIRECT)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  participants ChatParticipant[]
  messages     Message[]

  @@map("chats")
}

model ChatParticipant {
  id                  String   @id @default(cuid())
  chatId              String
  userId              String
  joinedAt            DateTime @default(now())
  lastReadAt          DateTime @default(now())
  readReceiptsEnabled Boolean  @default(true)
  chat                Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatId, userId])
  @@map("chat_participants")
}

model Message {
  id           String               @id @default(cuid())
  content      String
  type         MessageType          @default(TEXT)
  senderId     String
  chatId       String
  mediaUrl     String?
  replyToId    String?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  reactions    MessageReaction[]
  readReceipts MessageReadReceipt[]
  chat         Chat                 @relation(fields: [chatId], references: [id], onDelete: Cascade)
  replyTo      Message?             @relation("MessageReplies", fields: [replyToId], references: [id])
  replies      Message[]            @relation("MessageReplies")
  sender       User                 @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model MessageReaction {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  emoji     String
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])
  @@map("message_reactions")
}

model MessageReadReceipt {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@map("message_read_receipts")
}

model League {
  id          String         @id @default(cuid())
  name        String
  description String?
  adminId     String
  isPrivate   Boolean        @default(false)
  inviteCode  String?        @unique
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  events      Event[]
  admins      LeagueAdmin[]
  members     LeagueMember[]
  rules       LeagueRule[]
  admin       User           @relation("LeagueAdmin", fields: [adminId], references: [id], onDelete: Cascade)

  @@map("leagues")
}

model LeagueMember {
  id       String   @id @default(cuid())
  userId   String
  leagueId String
  points   Int      @default(0)
  rank     Int      @default(0)
  joinedAt DateTime @default(now())
  league   League   @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, leagueId])
  @@map("league_members")
}

model LeagueAdmin {
  id        String   @id @default(cuid())
  userId    String
  leagueId  String
  grantedAt DateTime @default(now())
  grantedBy String
  league    League   @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, leagueId])
  @@map("league_admins")
}

model LeagueRule {
  id          String        @id @default(cuid())
  leagueId    String
  title       String
  description String
  points      Int
  category    PointCategory @default(WINS)
  createdAt   DateTime      @default(now())
  league      League        @relation(fields: [leagueId], references: [id], onDelete: Cascade)

  @@map("league_rules")
}

model Event {
  id              String             @id @default(cuid())
  title           String
  description     String?
  leagueId        String?
  adminId         String
  startDate       DateTime
  endDate         DateTime
  maxParticipants Int?
  isPrivate       Boolean            @default(false)
  inviteCode      String?            @unique
  hasScoring      Boolean            @default(true)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  invitations     EventInvitation[]
  participants    EventParticipant[]
  rules           EventRule[]
  admin           User               @relation("EventAdmin", fields: [adminId], references: [id], onDelete: Cascade)
  league          League?            @relation(fields: [leagueId], references: [id], onDelete: Cascade)

  @@map("events")
}

model EventParticipant {
  id       String   @id @default(cuid())
  eventId  String
  userId   String
  points   Int      @default(0)
  rank     Int      @default(0)
  joinedAt DateTime @default(now())
  event    Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@map("event_participants")
}

model EventRule {
  id          String        @id @default(cuid())
  eventId     String
  title       String
  description String
  points      Int
  category    PointCategory @default(WINS)
  createdAt   DateTime      @default(now())
  event       Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_rules")
}

model EventInvitation {
  id          String           @id @default(cuid())
  eventId     String
  code        String           @unique
  email       String?
  phoneNumber String?
  status      InvitationStatus @default(PENDING)
  expiresAt   DateTime
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  event       Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_invitations")
}

model Friendship {
  id        String           @id @default(cuid())
  userId    String
  friendId  String
  status    FriendshipStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  friend    User             @relation("FriendOf", fields: [friendId], references: [id], onDelete: Cascade)
  user      User             @relation("UserFriendships", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
  @@map("friendships")
}

model UserPrivacySettings {
  id              String   @id @default(cuid())
  userId          String   // User who owns the privacy setting
  targetUserId    String   // User who the setting applies to
  hideOnlineStatus Boolean  @default(false)  // Whether to hide online status from target user
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user        User @relation("UserPrivacyOwner", fields: [userId], references: [id], onDelete: Cascade)
  targetUser  User @relation("UserPrivacyTarget", fields: [targetUserId], references: [id], onDelete: Cascade)

  @@unique([userId, targetUserId])
  @@map("user_privacy_settings")
}

// Enums

enum ChatType {
  DIRECT
  GROUP
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  FILE
  VOICE
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

enum PointCategory {
  WINS
  PARTICIPATION
  BONUS
  PENALTY
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}
